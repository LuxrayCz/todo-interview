// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  email         String   @unique
  password String
  accounts      Account[]
  sessions      Session[]

  issues Issue[]
  comments Comment[]
}

model Issue {
  uuid String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  name String
  description String?
  done Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  estimatedTimeInSec Int
  successTime DateTime?

  comments Comment[]
}

model Comment {
  uuid String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  issueId String
  issue Issue @relation(fields: [issueId], references: [uuid])

  content String
  createdAt DateTime @default(now())
}
